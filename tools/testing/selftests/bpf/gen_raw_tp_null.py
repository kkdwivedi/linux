#!/usr/bin/python3
import re
import sys

def parse_null_args(arg_str):
    pattern = r'NULL_ARG\((\d+)\)'
    numbers = []
    for part in arg_str.split('|'):
        part = part.strip()
        match = re.match(pattern, part)
        if match:
            numbers.append(int(match.group(1)))
    return numbers

def parse_tracepoint_line(line):
    line = line.strip().rstrip(',')
    match = re.match(r'RAW_TP_NULL_ARGS\(([^,]+),\s*(.*)\)', line)

    if match:
        tp_name = match.group(1).strip()
        arg_part = match.group(2).strip()
        arg_nums = parse_null_args(arg_part)
        if arg_nums:
            return tp_name, arg_nums
    return None, None

def generate_tests(entries):
    tests = []

    for tp_name, arg_nums in entries:
        for arg_num in arg_nums:
            test = ['', 'SEC("tp_btf/' + tp_name + '")',
                    '__failure __msg("R1 invalid mem access \'trusted_ptr_or_null_\'")',
                    f'int test_raw_tp_null_{tp_name}_arg_{arg_num}(void *ctx) {{']
            n = (arg_num - 1) * 8
            test.append(f'    asm volatile("r1 = *(u64 *)(r1 +{n}); r1 = *(u64 *)(r1 +0);" ::: __clobber_all);')
            test.extend(['    return 0;', '}'])
            tests.extend(test)
    return '\n'.join(tests)

# Read directly from stdin
entries = []
for line in sys.stdin:
    tp_name, arg_num = parse_tracepoint_line(line)
    if tp_name and arg_num is not None:
        entries.append((tp_name, arg_num))
print(
'''// SPDX-License-Identifier: GPL-2.0
/* Copyright (c) 2024 Meta Platforms, Inc. and affiliates. */

/* WARNING: This file is automatically generated, run gen_raw_tp_null.sh to update! */

#include <vmlinux.h>
#include <bpf/bpf_tracing.h>
#include "bpf_misc.h"

char _license[] SEC("license") = "GPL";''')
print(generate_tests(entries))
